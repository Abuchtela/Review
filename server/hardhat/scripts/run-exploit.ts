import { ethers } from "hardhat";
import crossLayerReentrancyExploit from "../../exploits/cross-layer-reentrancy";
import directFundTheftExploit from "../../exploits/direct-fund-theft";
import missingStateRootExploit from "../../exploits/missing-state-root";

// Map of vulnerability IDs to their corresponding exploit functions
const exploits: Record<string, () => Promise<void>> = {
  "cross-layer-reentrancy": crossLayerReentrancyExploit,
  "direct-fund-theft": directFundTheftExploit,
  "missing-state-root-verification": missingStateRootExploit
};

async function main() {
  // Get the vulnerability ID from environment variable
  const vulnerabilityId = process.env.VULNERABILITY_ID;
  
  if (!vulnerabilityId) {
    console.error("No vulnerability ID provided. Please set the VULNERABILITY_ID environment variable.");
    process.exit(1);
  }
  
  // Find the exploit function for the vulnerability
  const exploitFunction = exploits[vulnerabilityId];
  
  if (!exploitFunction) {
    console.error(`No exploit found for vulnerability ID: ${vulnerabilityId}`);
    console.error(`Available exploits: ${Object.keys(exploits).join(", ")}`);
    process.exit(1);
  }
  
  // Run the exploit
  try {
    await exploitFunction();
  } catch (error) {
    console.error("Error running exploit:", error);
    process.exit(1);
  }
}

if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export default main;
