{
  "timestamp": "2025-04-01T04:33:10.151Z",
  "findings": [
    {
      "contractId": 1,
      "toolId": 1,
      "testCaseId": null,
      "severity": "medium",
      "title": "Incorrectly resolved dispute game (with specific conditions)",
      "description": "Vulnerability allows dispute games to be incorrectly resolved when calling FaultDisputeGame.step() against a claim at MAX_GAME_DEPTH or calling attack/defend at MAX_GAME_DEPTH-2. Detected by static analysis.",
      "recommendation": "Add safety checks specifically for operations near MAX_GAME_DEPTH and implement proper validation for step, attack, and defend functions.",
      "code": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ncontract CrossL2Inbox {\n    mapping(bytes32 => bool) public initiatedMessages;\n    \n    event MessageInitiated(bytes32 indexed messageHash, address sender, address target);\n    \n    function verifyMessage(\n        address _sender,\n        address _target,\n        bytes calldata _message,\n        uint256 _nonce\n    ) internal view returns (bool) {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(_sender, _target, _mess",
      "id": 1,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 1,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Permanent freezing of funds",
      "description": "Vulnerability results in user funds being permanently locked in the contract with no recovery method. Detected by static analysis.",
      "recommendation": "Add recovery mechanisms and ensure critical functions have proper error handling to prevent permanent lockup states.",
      "code": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ncontract CrossL2Inbox {\n    mapping(bytes32 => bool) public initiatedMessages;\n    \n    event MessageInitiated(bytes32 indexed messageHash, address sender, address target);\n    \n    function verifyMessage(\n        address _sender,\n        address _target,\n        bytes calldata _message,\n        uint256 _nonce\n    ) internal view returns (bool) {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(_sender, _target, _mess",
      "id": 2,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 1,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Protocol insolvency",
      "description": "Vulnerability could lead to protocol-wide insolvency, affecting all users of the system. Detected by static analysis.",
      "recommendation": "Implement economic safety checks, liquidity thresholds, and proper accounting mechanisms to maintain protocol solvency.",
      "code": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ncontract CrossL2Inbox {\n    mapping(bytes32 => bool) public initiatedMessages;\n    \n    event MessageInitiated(bytes32 indexed messageHash, address sender, address target);\n    \n    function verifyMessage(\n        address _sender,\n        address _target,\n        bytes calldata _message,\n        uint256 _nonce\n    ) internal view returns (bool) {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(_sender, _target, _mess",
      "id": 3,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 2,
      "toolId": 1,
      "testCaseId": null,
      "severity": "high",
      "title": "Temporary freezing of funds",
      "description": "Vulnerability results in user funds being temporarily locked, recoverable via an upgrade. Detected by static analysis.",
      "recommendation": "Implement circuit breakers and recovery processes that can be triggered by governance to unfreeze assets.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @custom:proxied\n * @title L1CrossDomainMessenger\n * @notice The L1CrossDomainMessenger is a contract that sends messages from L1 to L2 and\n *         receives messages from L2 to L1.\n */\ncontract L1CrossDomainMessenger {\n    /**\n     * @notice Address of the OptimismPortal contract.\n     */\n    address public immutable PORTAL;\n\n    /**\n     * @notice Mapping of message hashes to boolean receipt status.\n     */\n    mapping(bytes32 =>",
      "id": 4,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 2,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Loss of user funds by direct theft",
      "description": "Vulnerability allows an attacker to directly steal user funds from the contract. Detected by static analysis.",
      "recommendation": "Implement proper access controls, validation checks, and reentrancy guards to prevent unauthorized fund transfers.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @custom:proxied\n * @title L1CrossDomainMessenger\n * @notice The L1CrossDomainMessenger is a contract that sends messages from L1 to L2 and\n *         receives messages from L2 to L1.\n */\ncontract L1CrossDomainMessenger {\n    /**\n     * @notice Address of the OptimismPortal contract.\n     */\n    address public immutable PORTAL;\n\n    /**\n     * @notice Mapping of message hashes to boolean receipt status.\n     */\n    mapping(bytes32 =>",
      "id": 5,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 3,
      "toolId": 1,
      "testCaseId": null,
      "severity": "high",
      "title": "Incorrectly initiated bond withdrawal",
      "description": "Vulnerability allows unauthorized bond withdrawal initiation, mitigated by a delay. Detected by static analysis.",
      "recommendation": "Implement multi-signature requirements or timelock delays for bond withdrawals.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @custom:proxied\n * @title L1StandardBridge\n * @notice The L1StandardBridge is a contract responsible for transferring ETH and ERC20\n *         tokens between L1 and L2.\n */\ncontract L1StandardBridge {\n    /**\n     * @notice Address of the L1CrossDomainMessenger.\n     */\n    address public immutable MESSENGER;\n\n    /**\n     * @notice Address of the L2 bridge.\n     */\n    address public immutable L2_BRIDGE;\n\n    /**\n     * @notice Map",
      "id": 6,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 4,
      "toolId": 1,
      "testCaseId": null,
      "severity": "high",
      "title": "Incorrectly initiated bond withdrawal",
      "description": "Vulnerability allows unauthorized bond withdrawal initiation, mitigated by a delay. Detected by static analysis.",
      "recommendation": "Implement multi-signature requirements or timelock delays for bond withdrawals.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @custom:proxied\n * @title OptimismPortal\n * @notice OptimismPortal is a low-level contract responsible for passing messages between L1\n *         and L2. Messages sent directly to the OptimismPortal have no form of replayability.\n *         Users are encouraged to use the L1CrossDomainMessenger for a higher-level interface.\n */\ncontract OptimismPortal {\n    /**\n     * @notice Address of the L2OutputOracle contract.\n     */\n    addre",
      "id": 7,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 4,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Permanent freezing of funds",
      "description": "Vulnerability results in user funds being permanently locked in the contract with no recovery method. Detected by static analysis.",
      "recommendation": "Add recovery mechanisms and ensure critical functions have proper error handling to prevent permanent lockup states.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @custom:proxied\n * @title OptimismPortal\n * @notice OptimismPortal is a low-level contract responsible for passing messages between L1\n *         and L2. Messages sent directly to the OptimismPortal have no form of replayability.\n *         Users are encouraged to use the L1CrossDomainMessenger for a higher-level interface.\n */\ncontract OptimismPortal {\n    /**\n     * @notice Address of the L2OutputOracle contract.\n     */\n    addre",
      "id": 8,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 4,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Protocol insolvency",
      "description": "Vulnerability could lead to protocol-wide insolvency, affecting all users of the system. Detected by static analysis.",
      "recommendation": "Implement economic safety checks, liquidity thresholds, and proper accounting mechanisms to maintain protocol solvency.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @custom:proxied\n * @title OptimismPortal\n * @notice OptimismPortal is a low-level contract responsible for passing messages between L1\n *         and L2. Messages sent directly to the OptimismPortal have no form of replayability.\n *         Users are encouraged to use the L1CrossDomainMessenger for a higher-level interface.\n */\ncontract OptimismPortal {\n    /**\n     * @notice Address of the L2OutputOracle contract.\n     */\n    addre",
      "id": 9,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 5,
      "toolId": 1,
      "testCaseId": null,
      "severity": "low",
      "title": "Gas optimization issue",
      "description": "Contract uses excessive gas for operations that could be optimized. Detected by static analysis.",
      "recommendation": "Refactor code to reduce gas consumption in critical functions.",
      "code": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./CrossL2Inbox.sol\";\n\ncontract L2ToL2CrossDomainMessenger is CrossL2Inbox {\n    mapping(bytes32 => bool) public processedMessages;\n    uint256 public messageNonce;\n    \n    event MessageProcessed(bytes32 indexed messageHash, bool success);\n    \n    modifier processOnce(bytes32 _messageHash) {\n        require(!processedMessages[_messageHash], \"L2ToL2: message already processed\");\n        _;\n        processedMessages[_messageHash] =",
      "id": 10,
      "dateFound": "2025-04-01T04:32:14.127Z"
    },
    {
      "contractId": 5,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Loss of user funds by direct theft",
      "description": "Vulnerability allows an attacker to directly steal user funds from the contract. Detected by static analysis.",
      "recommendation": "Implement proper access controls, validation checks, and reentrancy guards to prevent unauthorized fund transfers.",
      "code": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./CrossL2Inbox.sol\";\n\ncontract L2ToL2CrossDomainMessenger is CrossL2Inbox {\n    mapping(bytes32 => bool) public processedMessages;\n    uint256 public messageNonce;\n    \n    event MessageProcessed(bytes32 indexed messageHash, bool success);\n    \n    modifier processOnce(bytes32 _messageHash) {\n        require(!processedMessages[_messageHash], \"L2ToL2: message already processed\");\n        _;\n        processedMessages[_messageHash] =",
      "id": 11,
      "dateFound": "2025-04-01T04:32:14.128Z"
    },
    {
      "contractId": 6,
      "toolId": 1,
      "testCaseId": null,
      "severity": "high",
      "title": "Incorrectly initiated bond withdrawal",
      "description": "Vulnerability allows unauthorized bond withdrawal initiation, mitigated by a delay. Detected by static analysis.",
      "recommendation": "Implement multi-signature requirements or timelock delays for bond withdrawals.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @title L2ToL1MessagePasser\n * @notice The L2ToL1MessagePasser is a predeploy contract that stores messages to be sent\n *         to L1.\n */\ncontract L2ToL1MessagePasser {\n    /**\n     * @notice The status of a given message.\n     */\n    struct MessageStatus {\n        bool processed;\n        bool success;\n    }\n\n    /**\n     * @notice Mapping of withdrawal hashes to MessageStatus.\n     */\n    mapping(bytes32 => MessageStatus) public ",
      "id": 12,
      "dateFound": "2025-04-01T04:32:14.128Z"
    },
    {
      "contractId": 6,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Permanent freezing of funds",
      "description": "Vulnerability results in user funds being permanently locked in the contract with no recovery method. Detected by static analysis.",
      "recommendation": "Add recovery mechanisms and ensure critical functions have proper error handling to prevent permanent lockup states.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @title L2ToL1MessagePasser\n * @notice The L2ToL1MessagePasser is a predeploy contract that stores messages to be sent\n *         to L1.\n */\ncontract L2ToL1MessagePasser {\n    /**\n     * @notice The status of a given message.\n     */\n    struct MessageStatus {\n        bool processed;\n        bool success;\n    }\n\n    /**\n     * @notice Mapping of withdrawal hashes to MessageStatus.\n     */\n    mapping(bytes32 => MessageStatus) public ",
      "id": 13,
      "dateFound": "2025-04-01T04:32:14.128Z"
    },
    {
      "contractId": 6,
      "toolId": 1,
      "testCaseId": null,
      "severity": "medium",
      "title": "Incorrectly resolved dispute game (with specific conditions)",
      "description": "Vulnerability allows dispute games to be incorrectly resolved when calling FaultDisputeGame.step() against a claim at MAX_GAME_DEPTH or calling attack/defend at MAX_GAME_DEPTH-2. Detected by static analysis.",
      "recommendation": "Add safety checks specifically for operations near MAX_GAME_DEPTH and implement proper validation for step, attack, and defend functions.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @title L2ToL1MessagePasser\n * @notice The L2ToL1MessagePasser is a predeploy contract that stores messages to be sent\n *         to L1.\n */\ncontract L2ToL1MessagePasser {\n    /**\n     * @notice The status of a given message.\n     */\n    struct MessageStatus {\n        bool processed;\n        bool success;\n    }\n\n    /**\n     * @notice Mapping of withdrawal hashes to MessageStatus.\n     */\n    mapping(bytes32 => MessageStatus) public ",
      "id": 14,
      "dateFound": "2025-04-01T04:32:14.128Z"
    },
    {
      "contractId": 7,
      "toolId": 1,
      "testCaseId": null,
      "severity": "critical",
      "title": "Permanent freezing of funds",
      "description": "Vulnerability results in user funds being permanently locked in the contract with no recovery method. Detected by static analysis.",
      "recommendation": "Add recovery mechanisms and ensure critical functions have proper error handling to prevent permanent lockup states.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct Identifier {\n    address origin;\n    uint256 blockNumber;\n    uint256 logIndex;\n    uint256 timestamp;\n    uint256 chainId;\n}\n\n/// @title IL2ToL2CrossDomainMessenger\n/// @notice Interface for the L2ToL2CrossDomainMessenger contract.\ninterface IL2ToL2CrossDomainMessenger {\n    /// @notice Thrown when a non-written slot in transient storage is attempted to be read from.\n    error NotEntered();\n\n    /// @notice Thrown when attempting t",
      "id": 15,
      "dateFound": "2025-04-01T04:32:14.128Z"
    },
    {
      "contractId": 7,
      "toolId": 1,
      "testCaseId": null,
      "severity": "high",
      "title": "Incorrectly initiated bond withdrawal",
      "description": "Vulnerability allows unauthorized bond withdrawal initiation, mitigated by a delay. Detected by static analysis.",
      "recommendation": "Implement multi-signature requirements or timelock delays for bond withdrawals.",
      "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct Identifier {\n    address origin;\n    uint256 blockNumber;\n    uint256 logIndex;\n    uint256 timestamp;\n    uint256 chainId;\n}\n\n/// @title IL2ToL2CrossDomainMessenger\n/// @notice Interface for the L2ToL2CrossDomainMessenger contract.\ninterface IL2ToL2CrossDomainMessenger {\n    /// @notice Thrown when a non-written slot in transient storage is attempted to be read from.\n    error NotEntered();\n\n    /// @notice Thrown when attempting t",
      "id": 16,
      "dateFound": "2025-04-01T04:32:14.128Z"
    }
  ],
  "summary": {
    "critical": 8,
    "high": 5,
    "medium": 2,
    "low": 1,
    "total": 16
  }
}