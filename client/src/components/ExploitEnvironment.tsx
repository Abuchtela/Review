import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { VulnerabilityDetail } from "@/types";
import Terminal from "./Terminal";
import { useCompiler } from "@/hooks/use-compiler";
import { apiRequest } from "@/lib/queryClient";

interface ExploitEnvironmentProps {
  vulnerability: VulnerabilityDetail;
}

const CodeEditor = ({ code, language }: { code: string, language: string }) => {
  return (
    <div className="font-mono text-sm bg-[#1E1E1E] border border-[#333333] rounded-md p-4 overflow-auto max-h-[500px]">
      <pre>
        <code className={`language-${language}`}>{code}</code>
      </pre>
    </div>
  );
};

const ExploitEnvironment = ({ vulnerability }: ExploitEnvironmentProps) => {
  const { toast } = useToast();
  const [logs, setLogs] = useState<string[]>([]);
  const [isRunningExploit, setIsRunningExploit] = useState(false);
  const { compileContract, isCompiling } = useCompiler();

  const handleCompile = async () => {
    try {
      const result = await compileContract(vulnerability.id);
      
      if (result.success) {
        toast({
          title: "Compilation successful",
          description: "The contracts were compiled successfully.",
        });
        setLogs((prev) => [...prev, "Contract compilation successful"]);
      } else {
        toast({
          title: "Compilation failed",
          description: "Failed to compile contracts. Check terminal for details.",
          variant: "destructive",
        });
        setLogs((prev) => [...prev, `Compilation failed: ${result.output}`]);
      }
    } catch (error) {
      toast({
        title: "Compilation error",
        description: "An error occurred during compilation.",
        variant: "destructive",
      });
      console.error(error);
    }
  };

  const handleRunExploit = async () => {
    setIsRunningExploit(true);
    setLogs([]);
    
    try {
      const response = await apiRequest("POST", `/api/exploits/run/${vulnerability.id}`, {});
      const result = await response.json();
      
      if (result.success) {
        setLogs(result.logs);
        toast({
          title: "Exploit executed",
          description: "The exploit was executed successfully.",
        });
      } else {
        setLogs([...result.logs, "Exploit execution failed"]);
        toast({
          title: "Exploit failed",
          description: "Failed to execute the exploit. Check terminal for details.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error(error);
      toast({
        title: "Execution error",
        description: "An error occurred during exploit execution.",
        variant: "destructive",
      });
    } finally {
      setIsRunningExploit(false);
    }
  };

  const handleReset = async () => {
    try {
      await apiRequest("POST", "/api/environment/reset", {});
      setLogs([]);
      toast({
        title: "Environment reset",
        description: "The environment has been reset successfully.",
      });
    } catch (error) {
      console.error(error);
      toast({
        title: "Reset error",
        description: "An error occurred while resetting the environment.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {/* Vulnerable Contract */}
      <div>
        <h3 className="text-lg font-medium mb-4">Vulnerable Contract</h3>
        <CodeEditor 
          code={vulnerability.vulnerableContract.code} 
          language="solidity" 
        />
      </div>
      
      {/* Exploit Script */}
      <div>
        <h3 className="text-lg font-medium mb-4">Exploit Script</h3>
        <CodeEditor 
          code={vulnerability.exploitScript.code} 
          language={vulnerability.exploitScript.language} 
        />
      </div>
      
      {/* Malicious Contract (if exists) */}
      {vulnerability.maliciousContract && (
        <div className="lg:col-span-2">
          <h3 className="text-lg font-medium mb-4">Malicious Contract</h3>
          <CodeEditor 
            code={vulnerability.maliciousContract.code} 
            language="solidity" 
          />
        </div>
      )}
      
      {/* Terminal */}
      <div className="lg:col-span-2">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium">Execution Terminal</h3>
          <div className="flex space-x-3">
            <button
              onClick={handleCompile}
              disabled={isCompiling}
              className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition disabled:opacity-50"
            >
              {isCompiling ? "Compiling..." : "Compile"}
            </button>
            <button
              onClick={handleRunExploit}
              disabled={isRunningExploit}
              className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition disabled:opacity-50"
            >
              {isRunningExploit ? "Running..." : "Run Exploit"}
            </button>
            <button
              onClick={handleReset}
              className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition"
            >
              Reset Environment
            </button>
          </div>
        </div>
        <Terminal logs={logs} />
      </div>
    </div>
  );
};

export default ExploitEnvironment;
